
目的
複数人が参加する開発プロジェクトにおいて、メインの開発ツールとしてVSCODEを使用している環境で、現時点ではスタジオ(あるいはブラウザ)でしか編集出来ないInteroperability機能のBPL,DTL,Ruleを、VSCODEによるソースコート管理に加える。

前提:
各利用者が専用のワークディレクトリ、ローカルレポジトリを持つ
-これを共有してしまうと、コミット内容にあわせて編集対象をステージングするというGitの基本的な操作が出来なくなります。

VSCODEとスタジオで同一のワークディレクトリを使用する
-これを別にしてしまうと、同じファイルを別個のレポジトリにコミットするという危険を排除出来なくなります。
VSCODE,スタジオ双方を使用した一連の修正をコミットするという操作が出来なくなります。

各利用者が専用のIRIS環境を持つ
-これを共有してしまうと、DB内のソースコードとワークディレクトリ内のソースコードの同期がとれなくなります。

これら前提を満たすためには、以下の2択になります。
1)全てローカル
IRISインスタンス自体をローカルPC上にインストールして個人環境として使用しながら開発を進める。

2)全てリモート
IRISインスタンスは共有しながらも、ネームスペースとそこに紐づけるワークディレクトリは、個別に用意する。
VSCODEはSSH接続して、リモートのファイルシステム上のワークディレクトリを使用。

使用するソース管理機能:
VSCODEではGitのエクステンションを使用。
スタジオでは、編集内容を保存時にワークディレクトリに出力するソース管理フックを使用。

----------
Gitを使用した、典型的なの開発フローと何ら変わりありませんが、1)の全てローカルであり、共有リポジトリパターンの場合を例にとり
使用方法の流れを俯瞰します。

1) リモートリポジトリを作成
レポジトリ名:Project1
ブランチB1作成。
2) 参加各位のローカルフォルダにgit clone
ブランチをB1に切り替えて作業開始
3) 開発作業
下記の繰り返し。
git pull - コンフリクト解消 - ローカルIRISへのImport - 開発作業 - git add/commit - git push

vscode,スタジオにて、開発を進める。共に、ローカルIRISの同一のネームスペースを接続先に指定する。
保存内容は全て、同一のワークディレクトリ下に保存される用に設定する。
典型例は
フォルダ名: Project1            通常レポジトリ名と一致する。スタジオのプロジェクト名を同名で定義・保存する。
C:\Development\git\Project1     ここにローカルレポジトリ(.gitフォルダ)が存在
C:\Development\git\Project1\*   ここにIRISと関係のないファイルを配置
C:\Development\git\Project1\src ここにIRIS関連ファイル(cls, mac, incなど)を配置

他参加者による修正の反映。コンフリクトがあれば解消。内容のローカルIRISに反映。
単体テストはローカルのIRISを使用。
適宜ローカルのレポジトリにコミット。vscodeで行っても良いし(お勧め)、スタジオで行っても良い。
適宜リモートレポジトリにプッシュ。vscodeで行っても良いし(お勧め)、スタジオで行っても良い。

4) 自動化テスト
継続的にテスト実施するような環境を使用して、リモートリポジトリのB1ブランチのソースコードをテスト

5) リリース作業
B1ブランチをmasterブランチにマージ

6) 新規リリースに向け、B2ブランチを作成。以降、繰り返し。


